It’s a powerful tool that helps your app interact with the Android system, resources, and
components. In simple terms, Context is like a bridge that connects your app to the Android
operating system.

In Android programming, Context is an abstract class (android.content.Context) that provides a
connection to the Android system and resources. It’s an interface to global information about the
application environment, such as resources, assets, and classes. Context is used to access and
manipulate various aspects of the app and system, like starting activities, sending broadcasts,
and getting system services.

Types of Context
Here are the different types of Context in Android that we commonly use.

ActivityContext
ApplicationContext
ServiceContext
BroadcastReceiverContext
FragmentContext
ViewContext

1. ActivityContext
The Activity Context is a type of Context that is tied to the lifecycle of an Activity.
It is available from the moment the Activity is created until it is destroyed.
The Activity Context is unique to each Activity and is used to access resources, start new Activities,
and interact with the system.

Memory Management Considerations

The Activity Context is garbage collected when the Activity is destroyed, so you don’t need to worry
about explicitly releasing resources.
However, if you hold a reference to the Activity Context in a static variable or in a longer-lived
component (like a Service or Application Context), it can prevent the Activity from being garbage
collected, leading to memory leaks.

class MainActivity : Activity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.main_activity)

        // Using Activity Context to show a Toast message
        Toast.makeText(this, "Hello, Activity Context!", Toast.LENGTH_SHORT).show()
    }
}

2. FragmentContext
The FragmentContext is a type of Context that is tied to the lifecycle of a Fragment.
It is available from the moment the Fragment is attached to its parent Activity until it is detached.
The FragmentContext is used to access resources and interact with the system within the scope of
the Fragment.

Memory Management Considerations

The FragmentContext is garbage collected when the Fragment is detached from its parent Activity,
so you don’t need to worry about explicitly releasing resources.
However, if you hold a reference to the FragmentContext in a static variable or in a longer-lived
component (like an Application Context), it can prevent the Fragment from being garbage collected,
leading to memory leaks.

public class MyFragment extends Fragment {
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Using FragmentContext to show a Toast message
        Toast.makeText(getContext(), "Fragment Context Example", Toast.LENGTH_SHORT).show();
    }
}

3. ApplicationContext
The Application Context is a singleton instance that represents the entire application.
It is created when the app is launched and destroyed when the app is terminated.
The Application Context is used to access app-level resources, configure global settings, and
perform tasks that don’t rely on a specific Activity.
Memory Management Considerations

The Application Context is retained for the entire lifespan of the app, so it’s important to be
mindful of memory usage and avoid holding onto unnecessary references.
Since the Application Context is a singleton, it can be safely used as a substitute for Activity
Context in some cases, but it’s important to understand the implications of doing so.

class MyApplication : Application() {
    override fun onCreate() {
        super.onCreate()
        // Using Application Context to initialize a library
        val appContext: Context = applicationContext
        MyLibrary.init(appContext) // Initializing any library
    }
}


4. Service Context
The Service Context is a type of Context that is tied to the lifecycle of a Service.
It is available from the moment the Service is created until it is destroyed.
The Service Context is used to access resources, start new Services, and interact with the system
within the scope of the Service.

Memory Management Considerations

The Service Context is garbage collected when the Service is destroyed, so you don’t need to worry
about explicitly releasing resources.
However, if you hold a reference to the Service Context in a static variable or in a longer-lived
component (like an Application Context), it can prevent the Service from being garbage collected,
leading to memory leaks.

5. BroadcastReceiverContext
The BroadcastReceiverContext is a type of Context that is tied to the lifecycle of a BroadcastReceiver.
It is available from the moment the BroadcastReceiver is registered until it is unregistered.
The BroadcastReceiverContext is used to access resources and interact with the system within the scope of the BroadcastReceiver.
Memory Management Considerations

The BroadcastReceiverContext is garbage collected when the BroadcastReceiver is unregistered, so
you don’t need to worry about explicitly releasing resources.
However, if you hold a reference to the BroadcastReceiverContext in a static variable or in a
longer-lived component (like an Application Context), it can prevent the BroadcastReceiver from
being garbage collected, leading to memory leaks.

**********************************************EXAMPLES*****************************

// MyReceiver.java
public class MyReceiver extends BroadcastReceiver {
    @Override
    public void onReceive(Context context, Intent intent) {
        // Using BroadcastReceiverContext to show a Toast message
        Toast.makeText(context, "BroadcastReceiver Context Example", Toast.LENGTH_SHORT).show();
    }
}

// MyActivity.java
public class MyActivity extends AppCompatActivity {
    private MyReceiver myReceiver = new MyReceiver();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Register the BroadcastReceiver
        registerReceiver(myReceiver, new IntentFilter("my_action"));
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        // Unregister the BroadcastReceiver
        unregisterReceiver(myReceiver);
    }

    // Send a broadcast from a button click or elsewhere
    public void sendBroadcast(View view) {
        Intent intent = new Intent("my_action");
        sendBroadcast(intent);
    }
}


Here are the main things to consider when using Context in Android:

1. Choose the right Context: Use the appropriate type of Context for the task (ActivityContext, ApplicationContext, ServiceContext, BroadcastReceiverContext, FragmentContext, ViewContext).

2. Avoid static references: Don’t hold a Context in a static variable, as it can prevent garbage collection and lead to memory leaks.

3. Use WeakReference: Use WeakReference to hold a reference to a Context, allowing it to be garbage collected if needed.

4. Check for null: Always check if the Context is null before using it to avoid NullPointerExceptions.

5. Avoid using Context in AsyncTasks: AsyncTasks can outlive the Activity, causing memory leaks.

6. Avoid using Context in Threads: Threads can outlive the Context, causing memory leaks.

7. Use Context.getApplicationContext(): Use this method to get the Application Context instead of holding a reference to it.

8. Be mindful of Context scope: Use the Context that is appropriate for the scope of the operation (e.g., ActivityContext for UI-related operations).

9. Avoid sharing Context: Don’t share a Context between different components or scopes.

10. Consider using ContextWrapper: Use ContextWrapper to wrap a Context, allowing you to easily switch between different Contexts.


***************************QUESTIONS**********************************

What is the purpose of Context in Android?
Context provides access to resources and functionality for applications.

What is the difference between ApplicationContext and ActivityContext?
ApplicationContext is tied to the application’s lifecycle, while ActivityContext is tied to the
activity’s lifecycle.

How do you get a reference to the ApplicationContext in an Activity?
You can get a reference to the ApplicationContext using getApplicationContext() in an Activity.

What is the difference between getApplicationContext() and getBaseContext()?
getApplicationContext() returns the application’s context, while getBaseContext() returns the base
context for the activity.

How do you use Context to get a reference to the application’s resources?
You can use Context to get a reference to the application’s resources using getResources().
